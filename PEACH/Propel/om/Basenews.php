<?php 

require_once 'propel/om/BaseObject.php';

 

include_once 'propel/util/Criteria.php';
 

// (on-demand) include_once 'PEACH/Propel/Image.php';
// (on-demand) include_once 'PEACH/Propel/ImagePeer.php';
 

// (on-demand) include_once 'PEACH/Propel/Category.php';
// (on-demand) include_once 'PEACH/Propel/CategoryPeer.php';

include_once 'PEACH/Propel/newsPeer.php';

/**
 * This class was autogenerated by Propel on:
 *
 * [Fri Jun  4 20:26:28 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended; all references should be to news class. 
 * 
 * @package PEACH.Propel 
 */
abstract class Basenews extends BaseObject {
    
    /** 
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var newsPeer
     */
    private static $peer;

    /**
     * The value for the id field.
     * @var int      
     */
    private $id = 0;
      
    /**
     * The value for the subject field.
     * @var string      
     */
    private $subject = '';
      
    /**
     * The value for the summary field.
     * @var string      
     */
    private $summary;
      
    /**
     * The value for the body field.
     * @var string      
     */
    private $body;
      
    /**
     * The value for the image_id field.
     * @var int      
     */
    private $image_id = 0;
      
    /**
     * The value for the hits field.
     * @var int      
     */
    private $hits = 0;
      
    /**
     * The value for the approved field.
     * @var int      
     */
    private $approved = 0;
      
    /**
     * The value for the active field.
     * @var int      
     */
    private $active = 1;
      
    /**
     * The value for the comments field.
     * @var int      
     */
    private $comments = 0;
      
    /**
     * The value for the anonymous field.
     * @var int      
     */
    private $anonymous = 0;
      
    /**
     * The value for the usercreated field.
     * @var string      
     */
    private $usercreated = '';
      
    /**
     * The value for the userupdated field.
     * @var string      
     */
    private $userupdated = '';
      
    /**
     * The value for the datecreated field.
     * @var string      
     */
    private $datecreated = '0000-00-00 00:00:00';
      
    /**
     * The value for the dateupdated field.
     * @var string      
     */
    private $dateupdated = '0000-00-00 00:00:00';
      
    /**
     * The value for the poston field.
     * @var string      
     */
    private $poston = '0000-00-00 00:00:00';
      
    /**
     * The value for the expiration field.
     * @var string      
     */
    private $expiration = '0000-00-00 00:00:00';
      
    /**
     * The value for the cat_id field.
     * @var int      
     */
    private $cat_id = 0;
          
    
  
    /**
     * Get the id      
     *
     * @return int      
     */
    public function getid()
    {
        return $this->id;
    }

    
    /**
     * Set the value of id      
     *
     * @param int $v new value
     * @return void
     *       
     */
    public function setid($v)
    { 
        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = newsPeer::ID;
        }
                
    }


  
    /**
     * Get the subject      
     *
     * @return string      
     */
    public function getsubject()
    {
        return $this->subject;
    }

    
    /**
     * Set the value of subject      
     *
     * @param string $v new value
     * @return void
     *       
     */
    public function setsubject($v)
    { 
        if ($this->subject !== $v) {
            $this->subject = $v;
            $this->modifiedColumns[] = newsPeer::SUBJECT;
        }
                
    }


  
    /**
     * Get the summary      
     *
     * @return string      
     */
    public function getsummary()
    {
        return $this->summary;
    }

    
    /**
     * Set the value of summary      
     *
     * @param string $v new value
     * @return void
     *       
     */
    public function setsummary($v)
    { 
        if ($this->summary !== $v) {
            $this->summary = $v;
            $this->modifiedColumns[] = newsPeer::SUMMARY;
        }
                
    }


  
    /**
     * Get the body      
     *
     * @return string      
     */
    public function getbody()
    {
        return $this->body;
    }

    
    /**
     * Set the value of body      
     *
     * @param string $v new value
     * @return void
     *       
     */
    public function setbody($v)
    { 
        if ($this->body !== $v) {
            $this->body = $v;
            $this->modifiedColumns[] = newsPeer::BODY;
        }
                
    }


  
    /**
     * Get the image_id      
     *
     * @return int      
     */
    public function getimage_id()
    {
        return $this->image_id;
    }

    
    /**
     * Set the value of image_id      
     *
     * @param int $v new value
     * @return void
     * @throws PropelException      
     */
    public function setimage_id($v)
    { 
        if ($this->image_id !== $v) {
            $this->image_id = $v;
            $this->modifiedColumns[] = newsPeer::IMAGE_ID;
        }
            
        if ($this->aImage !== null && $this->aImage->getid() !== $v) {
            $this->aImage = null;
        }
            
    }


  
    /**
     * Get the hits      
     *
     * @return int      
     */
    public function gethits()
    {
        return $this->hits;
    }

    
    /**
     * Set the value of hits      
     *
     * @param int $v new value
     * @return void
     *       
     */
    public function sethits($v)
    { 
        if ($this->hits !== $v) {
            $this->hits = $v;
            $this->modifiedColumns[] = newsPeer::HITS;
        }
                
    }


  
    /**
     * Get the approved      
     *
     * @return int      
     */
    public function getapproved()
    {
        return $this->approved;
    }

    
    /**
     * Set the value of approved      
     *
     * @param int $v new value
     * @return void
     *       
     */
    public function setapproved($v)
    { 
        if ($this->approved !== $v) {
            $this->approved = $v;
            $this->modifiedColumns[] = newsPeer::APPROVED;
        }
                
    }


  
    /**
     * Get the active      
     *
     * @return int      
     */
    public function getactive()
    {
        return $this->active;
    }

    
    /**
     * Set the value of active      
     *
     * @param int $v new value
     * @return void
     *       
     */
    public function setactive($v)
    { 
        if ($this->active !== $v) {
            $this->active = $v;
            $this->modifiedColumns[] = newsPeer::ACTIVE;
        }
                
    }


  
    /**
     * Get the comments      
     *
     * @return int      
     */
    public function getcomments()
    {
        return $this->comments;
    }

    
    /**
     * Set the value of comments      
     *
     * @param int $v new value
     * @return void
     *       
     */
    public function setcomments($v)
    { 
        if ($this->comments !== $v) {
            $this->comments = $v;
            $this->modifiedColumns[] = newsPeer::COMMENTS;
        }
                
    }


  
    /**
     * Get the anonymous      
     *
     * @return int      
     */
    public function getanonymous()
    {
        return $this->anonymous;
    }

    
    /**
     * Set the value of anonymous      
     *
     * @param int $v new value
     * @return void
     *       
     */
    public function setanonymous($v)
    { 
        if ($this->anonymous !== $v) {
            $this->anonymous = $v;
            $this->modifiedColumns[] = newsPeer::ANONYMOUS;
        }
                
    }


  
    /**
     * Get the userCreated      
     *
     * @return string      
     */
    public function getuserCreated()
    {
        return $this->usercreated;
    }

    
    /**
     * Set the value of userCreated      
     *
     * @param string $v new value
     * @return void
     *       
     */
    public function setuserCreated($v)
    { 
        if ($this->usercreated !== $v) {
            $this->usercreated = $v;
            $this->modifiedColumns[] = newsPeer::USERCREATED;
        }
                
    }


  
    /**
     * Get the userUpdated      
     *
     * @return string      
     */
    public function getuserUpdated()
    {
        return $this->userupdated;
    }

    
    /**
     * Set the value of userUpdated      
     *
     * @param string $v new value
     * @return void
     *       
     */
    public function setuserUpdated($v)
    { 
        if ($this->userupdated !== $v) {
            $this->userupdated = $v;
            $this->modifiedColumns[] = newsPeer::USERUPDATED;
        }
                
    }


 
    /**
     * Get the [optionally formatted] dateCreated value.
     * @param string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the integer unix timestamp will be returned.
     * @return mixed Formatted date/time value as string or integer unix timestamp (if format is NULL).
	 * @throws PropelException - if unable to convert the date/time to timestamp.
     */
    public function getdateCreated($format = 'Y-m-d H:i:s')
    {
		if ($this->datecreated === null || $this->datecreated === '') {
			return null;
		} elseif (!is_int($this->datecreated)) {
			// a non-timestamp value was set externally, so we convert it
			$ts = strtotime($this->datecreated);
        	if ($ts === -1) {
				throw new PropelException("Unable to parse value of datecreated as date/time value: " . $this->datecreated);
        	}
		} else {
			$ts = $this->datecreated;
		}
		if ($format === null) {
            return $ts;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $ts);
        } else {
            return date($format, $ts);
        }
    }

    
    /**
     * Set the value of dateCreated      
     *
     * @param string $v new value
     * @return void
     *       
     */
    public function setdateCreated($v)
    { 
        if ($this->datecreated !== $v) {
            $this->datecreated = $v;
            $this->modifiedColumns[] = newsPeer::DATECREATED;
        }
                
    }


 
    /**
     * Get the [optionally formatted] dateUpdated value.
     * @param string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the integer unix timestamp will be returned.
     * @return mixed Formatted date/time value as string or integer unix timestamp (if format is NULL).
	 * @throws PropelException - if unable to convert the date/time to timestamp.
     */
    public function getdateUpdated($format = 'Y-m-d H:i:s')
    {
		if ($this->dateupdated === null || $this->dateupdated === '') {
			return null;
		} elseif (!is_int($this->dateupdated)) {
			// a non-timestamp value was set externally, so we convert it
			$ts = strtotime($this->dateupdated);
        	if ($ts === -1) {
				throw new PropelException("Unable to parse value of dateupdated as date/time value: " . $this->dateupdated);
        	}
		} else {
			$ts = $this->dateupdated;
		}
		if ($format === null) {
            return $ts;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $ts);
        } else {
            return date($format, $ts);
        }
    }

    
    /**
     * Set the value of dateUpdated      
     *
     * @param string $v new value
     * @return void
     *       
     */
    public function setdateUpdated($v)
    { 
        if ($this->dateupdated !== $v) {
            $this->dateupdated = $v;
            $this->modifiedColumns[] = newsPeer::DATEUPDATED;
        }
                
    }


 
    /**
     * Get the [optionally formatted] poston value.
     * @param string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the integer unix timestamp will be returned.
     * @return mixed Formatted date/time value as string or integer unix timestamp (if format is NULL).
	 * @throws PropelException - if unable to convert the date/time to timestamp.
     */
    public function getposton($format = 'Y-m-d H:i:s')
    {
		if ($this->poston === null || $this->poston === '') {
			return null;
		} elseif (!is_int($this->poston)) {
			// a non-timestamp value was set externally, so we convert it
			$ts = strtotime($this->poston);
        	if ($ts === -1) {
				throw new PropelException("Unable to parse value of poston as date/time value: " . $this->poston);
        	}
		} else {
			$ts = $this->poston;
		}
		if ($format === null) {
            return $ts;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $ts);
        } else {
            return date($format, $ts);
        }
    }

    
    /**
     * Set the value of poston      
     *
     * @param string $v new value
     * @return void
     *       
     */
    public function setposton($v)
    { 
        if ($this->poston !== $v) {
            $this->poston = $v;
            $this->modifiedColumns[] = newsPeer::POSTON;
        }
                
    }


 
    /**
     * Get the [optionally formatted] expiration value.
     * @param string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the integer unix timestamp will be returned.
     * @return mixed Formatted date/time value as string or integer unix timestamp (if format is NULL).
	 * @throws PropelException - if unable to convert the date/time to timestamp.
     */
    public function getexpiration($format = 'Y-m-d H:i:s')
    {
		if ($this->expiration === null || $this->expiration === '') {
			return null;
		} elseif (!is_int($this->expiration)) {
			// a non-timestamp value was set externally, so we convert it
			$ts = strtotime($this->expiration);
        	if ($ts === -1) {
				throw new PropelException("Unable to parse value of expiration as date/time value: " . $this->expiration);
        	}
		} else {
			$ts = $this->expiration;
		}
		if ($format === null) {
            return $ts;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $ts);
        } else {
            return date($format, $ts);
        }
    }

    
    /**
     * Set the value of expiration      
     *
     * @param string $v new value
     * @return void
     *       
     */
    public function setexpiration($v)
    { 
        if ($this->expiration !== $v) {
            $this->expiration = $v;
            $this->modifiedColumns[] = newsPeer::EXPIRATION;
        }
                
    }


  
    /**
     * Get the cat_id      
     *
     * @return int      
     */
    public function getcat_id()
    {
        return $this->cat_id;
    }

    
    /**
     * Set the value of cat_id      
     *
     * @param int $v new value
     * @return void
     * @throws PropelException      
     */
    public function setcat_id($v)
    { 
        if ($this->cat_id !== $v) {
            $this->cat_id = $v;
            $this->modifiedColumns[] = newsPeer::CAT_ID;
        }
            
        if ($this->aCategory !== null && $this->aCategory->getid() !== $v) {
            $this->aCategory = null;
        }
            
    }



    /**
     * @var Image      
     */
    private $aImage;

    /**
     * Declares an association between this object and a Image object
     *
     * @param Image $v
     * @return void
     * @throws PropelException
     */
    public function setImage($v)
    {
            
        if ($v === null) {
            $this->setimage_id('0');
        } else {
            $this->setimage_id($v->getid());
        }
      
        $this->aImage = $v;
    }


    /**
     * Get the associated Image object
     *
     * @return Image The associated Image object.
     * @throws PropelException
     */
    public function getImage()
    {
        // include the Peer class
        include_once 'PEACH/Propel/ImagePeer.php';

        if ($this->aImage === null && ($this->image_id !== null)) {
    
            $this->aImage = ImagePeer::retrieveByPK($this->image_id);
    
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               $obj = ImagePeer::retrieveByPK($this->image_id);
               $obj->addnewss($this);
             */
        }
        return $this->aImage;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * key.  e.g.
     * <code>$bar->setFooKey($foo->getPrimaryKey())</code>
     *
 
     * @return void
     * @throws PropelException
     */
    public function setImageKey($key)
    {

        $this->setimage_id( (int) $key);            
        
    }

    /**
     * @var Category      
     */
    private $aCategory;

    /**
     * Declares an association between this object and a Category object
     *
     * @param Category $v
     * @return void
     * @throws PropelException
     */
    public function setCategory($v)
    {
            
        if ($v === null) {
            $this->setcat_id('0');
        } else {
            $this->setcat_id($v->getid());
        }
      
        $this->aCategory = $v;
    }


    /**
     * Get the associated Category object
     *
     * @return Category The associated Category object.
     * @throws PropelException
     */
    public function getCategory()
    {
        // include the Peer class
        include_once 'PEACH/Propel/CategoryPeer.php';

        if ($this->aCategory === null && ($this->cat_id !== null)) {
    
            $this->aCategory = CategoryPeer::retrieveByPK($this->cat_id);
    
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               $obj = CategoryPeer::retrieveByPK($this->cat_id);
               $obj->addnewss($this);
             */
        }
        return $this->aCategory;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * key.  e.g.
     * <code>$bar->setFooKey($foo->getPrimaryKey())</code>
     *
 
     * @return void
     * @throws PropelException
     */
    public function setCategoryKey($key)
    {

        $this->setcat_id( (int) $key);            
        
    }

    private $fieldNames;

    /**
     * Generate a list of field names.
     *
     * @return array A list of field names
     */
    public function getFieldNames()
    {
        if ($this->fieldNames === null) {
            $this->fieldNames = array("id", "subject", "summary", "body", "image_id", "hits", "approved", "active", "comments", "anonymous", "userCreated", "userUpdated", "dateCreated", "dateUpdated", "poston", "expiration", "cat_id", );
        }
        return $this->fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param string $name field name
     * @return mixed Value of field
     */
    public function getByName($name)
    {
        switch($name) {
        
            case "id":
                return $this->getid();
                break;
            
            case "subject":
                return $this->getsubject();
                break;
            
            case "summary":
                return $this->getsummary();
                break;
            
            case "body":
                return $this->getbody();
                break;
            
            case "image_id":
                return $this->getimage_id();
                break;
            
            case "hits":
                return $this->gethits();
                break;
            
            case "approved":
                return $this->getapproved();
                break;
            
            case "active":
                return $this->getactive();
                break;
            
            case "comments":
                return $this->getcomments();
                break;
            
            case "anonymous":
                return $this->getanonymous();
                break;
            
            case "userCreated":
                return $this->getuserCreated();
                break;
            
            case "userUpdated":
                return $this->getuserUpdated();
                break;
            
            case "dateCreated":
                return $this->getdateCreated();
                break;
            
            case "dateUpdated":
                return $this->getdateUpdated();
                break;
            
            case "poston":
                return $this->getposton();
                break;
            
            case "expiration":
                return $this->getexpiration();
                break;
            
            case "cat_id":
                return $this->getcat_id();
                break;
        
            default:
                return null;
        } // switch()
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a string.  The string must be one of the static
     * strings defined in this Class' Peer.
     *
     * @param string $name peer name
     * @return mixed Value of field.
     */
    public function getByPeerName($name)
    {
        switch($name) {
      
            case newsPeer::ID:
                return $this->getid();
                break;
          
            case newsPeer::SUBJECT:
                return $this->getsubject();
                break;
          
            case newsPeer::SUMMARY:
                return $this->getsummary();
                break;
          
            case newsPeer::BODY:
                return $this->getbody();
                break;
          
            case newsPeer::IMAGE_ID:
                return $this->getimage_id();
                break;
          
            case newsPeer::HITS:
                return $this->gethits();
                break;
          
            case newsPeer::APPROVED:
                return $this->getapproved();
                break;
          
            case newsPeer::ACTIVE:
                return $this->getactive();
                break;
          
            case newsPeer::COMMENTS:
                return $this->getcomments();
                break;
          
            case newsPeer::ANONYMOUS:
                return $this->getanonymous();
                break;
          
            case newsPeer::USERCREATED:
                return $this->getuserCreated();
                break;
          
            case newsPeer::USERUPDATED:
                return $this->getuserUpdated();
                break;
          
            case newsPeer::DATECREATED:
                return $this->getdateCreated();
                break;
          
            case newsPeer::DATEUPDATED:
                return $this->getdateUpdated();
                break;
          
            case newsPeer::POSTON:
                return $this->getposton();
                break;
          
            case newsPeer::EXPIRATION:
                return $this->getexpiration();
                break;
          
            case newsPeer::CAT_ID:
                return $this->getcat_id();
                break;
      
            default:
                return null;
                
        } // switch()
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch($pos) {
  
            case 0:
                return $this->getid();
                break;
  
            case 1:
                return $this->getsubject();
                break;
  
            case 2:
                return $this->getsummary();
                break;
  
            case 3:
                return $this->getbody();
                break;
  
            case 4:
                return $this->getimage_id();
                break;
  
            case 5:
                return $this->gethits();
                break;
  
            case 6:
                return $this->getapproved();
                break;
  
            case 7:
                return $this->getactive();
                break;
  
            case 8:
                return $this->getcomments();
                break;
  
            case 9:
                return $this->getanonymous();
                break;
  
            case 10:
                return $this->getuserCreated();
                break;
  
            case 11:
                return $this->getuserUpdated();
                break;
  
            case 12:
                return $this->getdateCreated();
                break;
  
            case 13:
                return $this->getdateUpdated();
                break;
  
            case 14:
                return $this->getposton();
                break;
  
            case 15:
                return $this->getexpiration();
                break;
  
            case 16:
                return $this->getcat_id();
                break;
            default:
                return null;
        } // switch()
    }



    
    /**
     * Sets a field value from the object by name passed in as a string.
     *
     * @param string $name field name
     * @param mixed $value field value
     * @return void
     */
    public function setByName($name, $value)
    {
        switch($name) {
        
            case "id":
                $this->setid($value);
                break;
            
            case "subject":
                $this->setsubject($value);
                break;
            
            case "summary":
                $this->setsummary($value);
                break;
            
            case "body":
                $this->setbody($value);
                break;
            
            case "image_id":
                $this->setimage_id($value);
                break;
            
            case "hits":
                $this->sethits($value);
                break;
            
            case "approved":
                $this->setapproved($value);
                break;
            
            case "active":
                $this->setactive($value);
                break;
            
            case "comments":
                $this->setcomments($value);
                break;
            
            case "anonymous":
                $this->setanonymous($value);
                break;
            
            case "userCreated":
                $this->setuserCreated($value);
                break;
            
            case "userUpdated":
                $this->setuserUpdated($value);
                break;
            
            case "dateCreated":
                $this->setdateCreated($value);
                break;
            
            case "dateUpdated":
                $this->setdateUpdated($value);
                break;
            
            case "poston":
                $this->setposton($value);
                break;
            
            case "expiration":
                $this->setexpiration($value);
                break;
            
            case "cat_id":
                $this->setcat_id($value);
                break;
        
        } // switch()
    }
    
    /**
     * Sets a field from the object by name passed in
     * as a string.  The string must be one of the static
     * strings defined in this Class' Peer.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @return void
     */
    public function setByPeerName($name, $value)
    {
        switch($name) {
      
            case newsPeer::ID:
                $this->setid($value);
                break;
          
            case newsPeer::SUBJECT:
                $this->setsubject($value);
                break;
          
            case newsPeer::SUMMARY:
                $this->setsummary($value);
                break;
          
            case newsPeer::BODY:
                $this->setbody($value);
                break;
          
            case newsPeer::IMAGE_ID:
                $this->setimage_id($value);
                break;
          
            case newsPeer::HITS:
                $this->sethits($value);
                break;
          
            case newsPeer::APPROVED:
                $this->setapproved($value);
                break;
          
            case newsPeer::ACTIVE:
                $this->setactive($value);
                break;
          
            case newsPeer::COMMENTS:
                $this->setcomments($value);
                break;
          
            case newsPeer::ANONYMOUS:
                $this->setanonymous($value);
                break;
          
            case newsPeer::USERCREATED:
                $this->setuserCreated($value);
                break;
          
            case newsPeer::USERUPDATED:
                $this->setuserUpdated($value);
                break;
          
            case newsPeer::DATECREATED:
                $this->setdateCreated($value);
                break;
          
            case newsPeer::DATEUPDATED:
                $this->setdateUpdated($value);
                break;
          
            case newsPeer::POSTON:
                $this->setposton($value);
                break;
          
            case newsPeer::EXPIRATION:
                $this->setexpiration($value);
                break;
          
            case newsPeer::CAT_ID:
                $this->setcat_id($value);
                break;
                      
        } // switch()
    }

    /**
     * Sets a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch($pos) {
  
            case 0:
                $this->setid($value);
                break;
  
            case 1:
                $this->setsubject($value);
                break;
  
            case 2:
                $this->setsummary($value);
                break;
  
            case 3:
                $this->setbody($value);
                break;
  
            case 4:
                $this->setimage_id($value);
                break;
  
            case 5:
                $this->sethits($value);
                break;
  
            case 6:
                $this->setapproved($value);
                break;
  
            case 7:
                $this->setactive($value);
                break;
  
            case 8:
                $this->setcomments($value);
                break;
  
            case 9:
                $this->setanonymous($value);
                break;
  
            case 10:
                $this->setuserCreated($value);
                break;
  
            case 11:
                $this->setuserUpdated($value);
                break;
  
            case 12:
                $this->setdateCreated($value);
                break;
  
            case 13:
                $this->setdateUpdated($value);
                break;
  
            case 14:
                $this->setposton($value);
                break;
  
            case 15:
                $this->setexpiration($value);
                break;
  
            case 16:
                $this->setcat_id($value);
                break;
        } // switch()
    }


 
    /**
     * Removes this object from datastore and sets delete attribute.
     * 
     * @param Connection $con
     * @return void
     * @throws PropelException
     * @see BaseObject::setDeleted()
     * @see BaseObject::isDeleted()
     */
    public function delete($con = null)
    {    
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }
        $tx_owner = false;
        if ($con === null) {
            $con = Transaction::begin(BasenewsPeer::DATABASE_NAME);
            $tx_owner = true;
        }
        
        try {
            newsPeer::doDelete($this, $con);
            $this->setDeleted(true);
            if ($tx_owner) Transaction::commit($con);
        } catch (PropelException $e) {
            if ($tx_owner) Transaction::rollback($con);
            throw $e;
        }
    }
    
   
    /**
     * flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var boolean
     */
    private $alreadyInSave = false;
  

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * wraps the doSave() worker method in a transaction.
     *
     * @param Connection $con
     * @return void
     * @throws PropelException
     */
    public function save($con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }
        
        $tx_owner = false; // we can only commit/rollback transactions we start
        if ($con === null) {
            $con = Transaction::begin(newsPeer::DATABASE_NAME);
            $tx_owner = true;
        }
        
        try {
            self::doSave($con);            
            if ($tx_owner) Transaction::commit($con);
        } catch (PropelException $e) {
            if ($tx_owner) Transaction::rollback($con);
            throw $e;
        }
    }
  
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @param Connection $con
     * @return void
     * @throws PropelException
     */
    protected function doSave($con) 
    {
        
         
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            /*             
            FIXME! the following code can cause an infinite loop, needs more thought.
            
            [HL] I need to understand why exactly this would cause an infinte loop
            since we shouldn't have any problems with duplicate attempts to save the *same*
            object.
            */
        
            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.
       
            if ($this->aImage !== null) {
                if ($this->aImage->isModified()) $this->aImage->save($con);
                $this->setImage($this->aImage);
            }
       
            if ($this->aCategory !== null) {
                if ($this->aCategory->isModified()) $this->aCategory->save($con);
                $this->setCategory($this->aCategory);
            }
          
  
            // If this object has been modified, then save it to the database.
            if ($this->isModified()) {
                if ($this->isNew()) {
                    $pk = newsPeer::doInsert($this, $con);
                    $this->setPrimaryKey($pk); // [HL] make sure new PK is stored to object.
                    $this->setNew(false);
                } else {
                    newsPeer::doUpdate($this, $con);
                }            
                $this->resetModified(); // [HL] After being saved an object is no longer 'modified'
            }

            $this->alreadyInSave = false;
        }
    }

    /**
     * Validates the objects modified field values.
     * This includes all objects related to this table.
     *
     * @return mixed <code>true</code> if all columns pass validation
     *              or an array of <code>ValidationFailed</code> objects for columns that fail.
     */
    public function validate()
    {
        return $this->doValidate();
    }
 
    /**
     * flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var boolean
     */
    protected $alreadyInValidation = false;
  
    /**
     * This function performs the validation work for complex object models.
     * 
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate()
    {
        if (! $this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;
      
            $failureMap = array();      
      
            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.
            if ($this->aImage !== null) {
                if (($retval = $this->aImage->validate()) !== true) {
                    $failureMap = array_merge($failureMap, $retval);
                }
            }
            if ($this->aCategory !== null) {
                if (($retval = $this->aCategory->validate()) !== true) {
                    $failureMap = array_merge($failureMap, $retval);
                }
            }

            if (($retval = newsPeer::doValidate($this)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }
      
      
            $this->alreadyInValidation = false;
        }
    
        return (!empty($failureMap) ? $failureMap : true);
    }
  

    /**
     * Set the PrimaryKey.
     *
     * @param mixed id Primary key.
     * @return void
     * @throws PropelException     */
    public function setPrimaryKey($key) 
    {        
        $this->setid($key);
    }
    

    /**
     * Returns an id that differentiates this object from others
     * of its class.
     * @return int 
     */
    public function getPrimaryKey()
    {

        return $this->getid();

    }


    
    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     *  
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *  
     * @return news Clone of current object.
     * @throws PropelException
     */
    public function __clone() 
    {
        $copyObj = new news();
 
        $copyObj->setsubject($this->subject);
 
        $copyObj->setsummary($this->summary);
 
        $copyObj->setbody($this->body);
 
        $copyObj->setimage_id($this->image_id);
 
        $copyObj->sethits($this->hits);
 
        $copyObj->setapproved($this->approved);
 
        $copyObj->setactive($this->active);
 
        $copyObj->setcomments($this->comments);
 
        $copyObj->setanonymous($this->anonymous);
 
        $copyObj->setuserCreated($this->usercreated);
 
        $copyObj->setuserUpdated($this->userupdated);
 
        $copyObj->setdateCreated($this->datecreated);
 
        $copyObj->setdateUpdated($this->dateupdated);
 
        $copyObj->setposton($this->poston);
 
        $copyObj->setexpiration($this->expiration);
 
        $copyObj->setcat_id($this->cat_id);
        
        $copyObj->setNew(true);
 
        $copyObj->setid('0'); // this is a pkey column, so set to default value

        return $copyObj;
    }
        

    /**
     * returns a peer instance associated with this om.  Since Peer classes    
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     * @return newsPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new newsPeer();
        }
        return self::$peer;
    }

}
